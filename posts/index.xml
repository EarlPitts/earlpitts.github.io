<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Bendeguz Seres</title>
        <link>http://bendeguz.xyz/posts/</link>
        <description>Recent content in Posts on Bendeguz Seres</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 21 Jun 2021 09:56:41 +0100</lastBuildDate>
        <atom:link href="http://bendeguz.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>UEFI and Secure Boot</title>
            <link>http://bendeguz.xyz/posts/uefi-and-secure-boot/</link>
            <pubDate>Mon, 21 Jun 2021 09:56:41 +0100</pubDate>
            
            <guid>http://bendeguz.xyz/posts/uefi-and-secure-boot/</guid>
            <description>Not too long ago, I had to figure out how to boot into linux with secure boot enabled, without modifying the key database. As it turns out, this is not a trivial task, so I spent like half a day on a weekend, researching the topic, but I finally figured out a way to do it. I wrote this post in the hope that it could help others in similar situations.</description>
            <content type="html"><![CDATA[<p>Not too long ago, I had to figure out how to boot into linux with secure boot enabled, without modifying the key database.
As it turns out, this is not a trivial task, so I spent like half a day on a weekend, researching the topic, but I finally figured out a way to do it.
I wrote this post in the hope that it could help others in similar situations.
Note that I mostly discuss the solution for my setup, so it may not be applicable for yours, but I tried to provide all the background info that I think is relevant, so you can hopefully find a solution for your exact problem.</p>
<p>For starters, let&rsquo;s look at the firmware.</p>
<h1 id="firmware-types">Firmware Types</h1>
<p>There are basically two types of firmware today, that&rsquo;s used almost everywhere: BIOS and UEFI.
These are proprietary software, implemented by the hardware vendor, although there exist some FOSS firmware like libreboot and coreboot.
Newer hardware usually ships with UEFI, which is the newer one of the two.</p>
<p>The main difference between them is the way they boot into the OS: BIOS uses the MBR (Master Boot Record) to initiate the boot process, while UEFI is able to read the filesystem, so it can search for it&rsquo;s &ldquo;EFI apps&rdquo; anywhere on the disk.
These two methods are fundamentally different, so it&rsquo;s not really possible to use them interchangeably, although UEFI can boot in legacy mode, which can be thought of as &ldquo;BIOS mode&rdquo;, because it basically emulates what BIOS does.
After you installed the OS, there is no easy way to change between these modes.
If you boot from the install medium in BIOS mode, it will install the OS in BIOS native mode.
If you boot it in UEFI mode, it will install it in UEFI native mode.</p>
<p>Another thing that has to be kept in mind while choosing between UEFI and BIOS is that UEFI, if used natively, not in legacy mode, requires the GPT partitioning scheme.</p>
<h1 id="uefi">UEFI</h1>
<p>UEFI stands for Unified Extensible Firmware Interface.
It&rsquo;s main goal is to standardize the booting process, and provide basic functionalities that were missing from BIOS.
It&rsquo;s important to note that UEFI is just a specification, that would, in an ideal world, be fully implemented by the hardware vendors (which, unfortunately, is not always the case).</p>
<p>Because UEFI can read the <em>partition table</em> and even the <em>file system</em>, it&rsquo;s much more flexible than BIOS, which requires from the image that it boots to be in the master boot record of the disk.
To see how limiting this is: the master boot record is the first 512 bytes of the disk.
And it also contains the partition table, so about 440 bytes remain for the bootstrap code, which starts the boot process.
Of course nowadays half a kilobyte is not enough for anything, so what happens is that bootloaders use some kind of stub, that they place in the MBR, whose only job is to call the bootloader.</p>
<p>In contrast, with UEFI you can put as many bootloaders on your disk as you want, taking up as much space as you want.
The only requirements is that it has to be executable by UEFI, and the partition in which it resides, has to be an <em>EFI partition</em> (which is just a specific version of FAT).
To know where it should look for these executables, UEFI relies on <em>boot entries</em>, stored in NVRAM.
On linux, these entries can be accessed through the kernel in <code>/sys/firmware/efi/efivars</code>.
There is also a tool called <code>efibootmgr</code>, which I will talk about shortly, that makes managing the boot entries easier.</p>
<p>The entries in this NVRAM are used by the <em>UEFI Boot Manager</em>, which you can think of as a firmware level boot menu.
It can be configured by NVRAM variables, and it has the boot order and the entries for each EFI app.
You can define your entries explicitly, but it also can define them automatically.
In fallback mode, when it doesn&rsquo;t find the EFI apps defined in the boot entries, it will look at the EFI partitions, and tries to load <code>/EFI/BOOT/BOOT&lt;arch&gt;.EFI</code>
Fallback is mostly used for booting from external devices.
All it takes for a disk to be UEFI bootable is to have an EFI partition with at least one EFI image on it.</p>
<p>As long as it&rsquo;s executable by UEFI, you can put anything in the EFI parititon.
Usually the vendor ships the hardware with some applications already installed (usually in the <code>EFI/&lt;vendor&gt;</code> directory), like diagnostic and recovery tools, and also the EFI shell, which is exactly what it sounds like: a little shell you can use when booting fails for some reason.
Knowing how to navigate the EFI shell can be life-saving, when you can&rsquo;t boot your OS normally, and you only have to know about 3 things:</p>
<ul>
<li>You can use <code>-b</code> for paging (this is key, because without this, you can&rsquo;t even read the output of <code>help</code>)</li>
<li><code>map</code> for listing block devices and filesystems</li>
<li><code>FS&lt;n&gt;:</code> to use the n-th filesystem</li>
</ul>
<p>When &ldquo;inside&rdquo; a filesystem, you can use <code>ls</code> and <code>cd</code> to navigate.
If you found your EFI image, just type it&rsquo;s path (you can use it&rsquo;s relative path) to start it.</p>
<h1 id="secure-boot">Secure Boot</h1>
<p>And now we arrived at the main topic: secure boot.
The important thing to understand is that secure boot is not some evil plan by Microsoft, although it does make life harder if you don&rsquo;t use Windows, and you want secure boot enabled (or your employer wants it enabled).</p>
<p>Secure boot is a feature provided by UEFI, for making it harder to boot anything but the things you want your device to boot.
It does this by requiring the image (the EFI app) to be signed by your key, otherwise it won&rsquo;t start it.
It says nothing about Microsoft, it just provides a way to prevent unsigned images from executing.</p>
<p>The problem comes from the fact that Microsoft requires that the device should be able to use secure boot for it to be Microsoft certified.
Because vendors desperately need this arguably high status for their devices for them to be allowed to put the Microsoft stickers on them, they ship the hardware with Microsoft keys already installed.
Now if you don&rsquo;t own the hardware, and can&rsquo;t access the key database, you can only execute apps that were signed by Microsoft (and the vendor).
Of course if you own it, and you can access the key database, nothing stops you from adding your own keys and signing your own bootloader (or anything else).</p>
<p>Now if you are in the unfortunate situation of not being able to modify the key database, and you are forced to use secure boot, but you would, for some inapprehensible reason, use anything but Windows, reading the previous paragraphs must have left you pretty hopeless.
Signing the image is done by ECDSA, with the minimum key size of 256, which can take some time to crack.
Fortunately, there is an other way to circumvent the problem: by the help of Microsoft itself.</p>
<p>Microsoft was nice enough to also sign loaders for it&rsquo;s friends.
There are two distros I know of, which have their bootloaders signed: Ubuntu and Fedora.
So these two should start fine wihout any problem.
But what if you don&rsquo;t want to use an enterprise linux distro?
That&rsquo;s where <em>signed boot loaders</em> come into the picture.</p>
<h1 id="preloader-and-shim">Preloader and Shim</h1>
<p>There are two knows signed bootloaders: preloader and shim.
I will only show preloader, because that&rsquo;s what I use, but the process should be similar with shim.</p>
<p>Preloader is a signed EFI app, that does one thing: calls your EFI executable.
That EFI executable can be anything, so you can call your bootloader with it.
(It should be possible to call directly your kernel, if you use it as an EFISTUB, but I&rsquo;m not sure how to pass the kernel parameters to it with the preloader.)</p>
<p>It works like this: you put the preloader into your EFI partition, then you create a boot entry for it, and finally, you place your bootloader (or whatever) in the same folder, and rename it to <code>loader.efi</code> (this is important, because the preloader will search for a file with this exact name).</p>
<p>There is one last problem: Microsoft wouldn&rsquo;t sign something with their key, that launches arbitrary executables.
This is why preloader and shim use an allowlist, called Machine Owner Key list.
Your binary&rsquo;s hash has to be in the Machine Owner Key list, otherwise they won&rsquo;t start it, and you have to enroll your binary yourself.
If your are using Arch, you can jsut install the <code>preloader-signed</code> package from the AUR, which should work out of the box.
I will take this package for granted, so I won&rsquo;t discuss the process of enrolling the hash in the Machine Owner Key list, but you can find more information about it on the <a href="https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#PreLoader">Arch wiki</a>.</p>
<p>After installing the <code>preloader-signed</code> package, you have to copy the Preloader and HashTool EFI images to you EFI partition.
This depends on your setup, but for me, it&rsquo;s <code>&lt;efi_part&gt;/EFI/grub</code>.</p>
<p><code># cp /usr/share/preloader-signed/{PreLoader,HashTool}.efi &lt;efi_part&gt;/EFI/grub</code></p>
<p>Now copy the bootloader to the same folder, and rename it to <code>loader.efi</code></p>
<p>And finally, add a new boot entry to the NVRAM (you can figure out the partition with <code>efibootmgr -v</code>):</p>
<p><code># efibootmgr --verbose --disk /dev/&lt;disk&gt; --part &lt;partition&gt; --create --label &quot;&lt;name&gt;&quot; --loader &lt;efi_part&gt;/EFI/grub/PreLoader.efi</code></p>
<p>After this, you can change the boot order with the following command (use <code>efibootmgr -v</code> to get the entry numbers):</p>
<p><code># efibootmgr -o xxx,yyy,zzz...</code></p>
<p>If everything went according to the plan, you should be able to boot into your OS with the preloader boot entry.</p>
]]></content>
        </item>
        
        <item>
            <title>Python Environment</title>
            <link>http://bendeguz.xyz/posts/venv/</link>
            <pubDate>Sat, 07 Mar 2020 22:09:41 +0100</pubDate>
            
            <guid>http://bendeguz.xyz/posts/venv/</guid>
            <description>For making your life a lot easier while developing with python, it&amp;rsquo;s important that you know about the concept of virtual environments. With virtual environments, you won&amp;rsquo;t clutter your global environment, and you can even use different versions of specific packages.
Before we can discuss the topic of virtual environments, we have to know about package management in python.
PIP Pip stands for Pip Installs Packages (recursive acronyms are apparently very popular among tech people).</description>
            <content type="html"><![CDATA[<p>For making your life a lot easier while developing with python, it&rsquo;s important that you know about the concept of virtual environments.
With virtual environments, you won&rsquo;t clutter your global environment, and you can even use different versions of specific packages.</p>
<p>Before we can discuss the topic of virtual environments, we have to know about package management in python.</p>
<h2 id="pip">PIP</h2>
<p>Pip stands for Pip Installs Packages (recursive acronyms are apparently very popular among tech people). When you install a package with pip, it places it inside the current namespace, so you can import it in your scripts.<br>
Using pip is really simple, you just write <code>pip install</code>, then the package you want. Pip can write the packages installed in the current environment with their version number into a file, that can be used to install the same packages elsewehere. To do this, just do:</p>
<p><code>pip freeze &gt; requirements.txt</code></p>
<p>This will create a requirements.txt file with the name and version number of all of your packages. (Or overwrite the old file if you have one.)</p>
<p>So now that we know how to use pip, we can create our virtual environment.</p>
<p>There are a number of ways to create virtual environments (pew, pipenv, virtualenv, just to name a few). I&rsquo;ll use venv, but everything should work with other methods.</p>
<p>To create a virtual environment named <em>venv</em>, issue the command:</p>
<p><code>python -m venv venv</code></p>
<p>This will generate a bunch of file in a folder named venv.</p>
<p><em>It&rsquo;s a good practice to make a line with the folder&rsquo;s name in your .gitignore, because (most of the time) you don&rsquo;t want to track your packages in version control.</em></p>
<p>To &ldquo;activate&rdquo; your environment, you can source the activate file inside venv/bin/activate (assuming <em>venv</em> is your folder&rsquo;s name):</p>
<p><code>source venv/bin/activate</code></p>
<p>Now your environment&rsquo;s name will appear inside your propmt, and you&rsquo;re ready to go. Everything you install with pip and every environmental variable you set will be inside this environment.</p>
<h2 id="env">.env</h2>
<p>It&rsquo;s good practice to save your env variables in a .env file. This will contain passwords and local endpoints, and you probably don&rsquo;t want to put it in version control.<br>
When you start developing, you can just source it, and the variables will be set in your environment.</p>
]]></content>
        </item>
        
    </channel>
</rss>
